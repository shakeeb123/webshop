(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'NoneType' object has no attribute 'amount'"
p3
sS'layer'
p4
S'D:\\web2py_win\\web2py\\applications\\webshop\\controllers/webshop_api.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\nimport json\n\n#Internal method\ndef __valid_product(product_name):\n\t"""\n\tThis call is used to validate the existence of product in catalog with amount because if there is amount, product is not valid for shopping\n\t"""\n\tproduct_name = db.product_catalog.name == product_name\n\tquery = db(product_name).select().first()\n\tif query.amount > 0:\n\t\treturn True\n\treturn False\n\n#Commonly used response\ndef invalid_product():\n\t"""\n\tReturns the values that the product mentioned was invalid and data needs to be provided again.\n\t"""\n\treturn dict(success = False, reason = "Not a valid product.")\n\n#API Features\ndef add_product():\n\t"""\n\tThis call checks if the product is already added in catalog database, otherwise adds the product and returns its product ID.\n\t"""\n\tdata = json.loads(request.body.read())\n\tproduct_name = data["name"]\n\tproduct_amount = int(data["amount"])\n\tproduct_price = int(data["price"])\n\tproduct = db.product_catalog.name == product_name\n\tquery = db(product).select().first()\n\tif query.amount > 0:\n\t\treturn dict(success = False, reason = "Product already in catalog.")\n\tproduct_id = db.product_catalog.insert(name = product_name, amount = product_amount, price = product_price)\n\treturn dict(success = True, product_id = product_id)\n\ndef edit_product():\n\t"""\n\tThis call lets you edit any product after checking its validity and lets you update price or amount or both in catalog .\n\t"""\n\tdata = json.loads(request.body.read())\n\tproduct_name = data["name"]\n\n\tif not __valid_product(product_name):\n\t\tredirect(\'invalid_product.json\')\n\n\tquery = db.product_catalog.name == product_name\n\n\tif data["amount"] and data["price"]:\n\t\tdb(query).update(amount = product_amount, price = product_price)\n\t\treturn dict(success = True)\n\t\n\telif data["amount"]:\n\t\tproduct_amount = int(data["amount"])\n\t\tdb(query).update(amount = product_amount)\n\t\treturn dict(success = True)\n\t\n\telif data["price"]:\n\t\tproduct_price = int(data["price"])\n\t\tdb(query).update(price = product_price)\n\t\treturn dict(success = True)\n\ndef remove_product():\n\t"""\n\tThis call is used to remove any product from catalog deleting all the information related to amount and price of the product.\n\t"""\n\tdata = json.loads(request.body.read())\n\tproduct_name = data["name"]\n\n\tif not __valid_product(product_name):\n\t\tredirect(\'invalid_product.json\')\n\n\tquery = db.product_catalog.name == product_name\n\tdb(query).delete()\n\tdb.commit()\n\treturn dict(success = True)\n\ndef add_product_to_basket():\n\t"""\n\tThis call checks if the product is already added in shopping basket, otherwise adds the product and returns its product ID.\n\t"""\n\tdata = json.loads(request.body.read())\n\tproduct_name = data["name"]\n\tpurchase_amount = int(data["amount"])\n\n\tif not __valid_product(product_name):\n\t\tredirect(\'invalid_product.json\')\n\n\tquery = db.product_catalog.name == product_name\n\tproduct = db(query).select().first()\n\n\tquery2 = db.shopping_basket.name == product_name\n\tbasket_entry = db(query2).select().first()\n\n\tif product.amount > purchase_amount:\n\t\tproduct_id = db.shopping_basket.insert(name = product_name, catalog_id = product.id , purchase_amount = purchase_amount)\n\t\tnew_amount = product.amount - purchase_amount\n\t\tdb(query).update(amount = new_amount)\n\t\treturn dict(success = True, product_id = product_id)\n\telif product.name == basket_entry.name:\n\t\treturn dict(success = False, reason = "Product already in basket.")\n\telse:\n\t\treturn dict(success = False, reason = "Product not available.")\t\n\t\ndef edit_product_from_basket():\n\t"""\n\tThis call lets you edit any product from shopping basket after checking its validity and lets you update purchase amount in basket \n\t"""\n\tdata = json.loads(request.body.read())\n\tproduct_name = data["name"]\n\tpurchase_amount = int(data["amount"])\n\n\tif not __valid_product(product_name):\n\t\tredirect(\'invalid_product.json\')\n\n\tquery = db.shopping_basket.name == product_name\n\tbasket_entry = db(query).select().first()\n\n\tquery2 = db.product_catalog.name == product_name\n\tproduct = db(query2).select().first()\n\n\tif not basket_entry:\n\t\treturn dict(success = False, reason = "Product not in basket.")\n\n\tdb(query).update(amount = purchase_amount)\n\tnew_amount = basket_entry.amount + product.amount - purchase_amount\n\tdb(query2).update(amount = new_amount)\n\treturn dict(success = True)\t\n\t\t\ndef remove_product_from_basket():\n\t"""\n\tThis call is used to remove any product from shopping basket deleting all the information related to purchase amount of the product.\n\t"""\n\tdata = json.loads(request.body.read())\n\tproduct_name = data["name"]\n\t\n\tif not __valid_product(product_name):\n\t\tredirect(\'invalid_product.json\')\n\n\tquery = db.shopping_basket.name == product_name\n\tbasket_entry = db(query).select().first()\n\n\tquery2 = db.product_catalog.name == product_name\n\tproduct = db(query2).select().first()\n\n\tif not basket_entry:\n\t\treturn dict(success = False, reason = "Product not in basket.")\n\n\tnew_amount = basket_entry.amount + product.amount\n\tdb(query).delete()\n\tdb(query2).update(amount = new_amount)\n\tdb.commit()\n\treturn dict(success = True)\n\t\t\ndef query_products_from_catalog():\n\t"""\n\tThis call is used to query products from catalog based on name or price or price range, sort it according to name or price and group the\n\tproducts by specified price range.\n\t"""\n\tdata = json.loads(request.body.read())\t\n\tpagination = 100\n\tsorting_parameter = data["sort"]\n\n\tif data["name"]:\n\t\tproduct_name = data["name"]\n\t\tquery = db(db.product_catalog.name.contains(product_name))\n\t\n\telif data["price"]:\n\t\tproduct_price = data["price"]\n\t\tquery = db(db.product_catalog.price == product_price)\n\t\n\t\tmin_price = data["min_price"]\n\t\tmin_range = db.product_catalog.price > min_price \n\n\t\tmax_price = data["max_price"]\n\t\tmax_range = db.product_catalog.price < max_price \n\t\t\n\t\tif min_price & max_price:\n\t\t\tprice_range = min_range & max_range\n\t\t\tquery = db(price_range)\n\n\t\telif min_price:\t\t\t\n\t\t\tquery = db(min_range)\n\t\t\n\t\telif max_price:\t\t\t\n\t\t\tquery = db(max_range)\n\t\t\n\tif sorting_parameter:\n\t\trows = query.select(\n\t\t\tlimitby = pagination,\n\t\t\torderby = getattr(db.product_catalog,sorting_parameter))\n\t\n\telif sorting_parameter & price_range:\n\t\trows = query.select(\n\t\t\tlimitby = pagination,\n\t\t\torderby = getattr(db.product_catalog,sorting_parameter),\n\t\t\tgroupby = db.product_catalog.name, having = price_range)\n\telse:\n\t\trows = query.select(limitby = pagination, orderby = db.product_catalog.name)\n\treturn dict(success = True, rows = rows)\n\ndef query_products_from_basket():\n\t"""\n\tThis call is used to query products from shopping basket based on name or price or price range, sort it according to name or price and group the\n\tproducts by specified price range.\n\t"""\n\tdata = json.loads(request.body.read())\t\n\tpagination = 100\n\tsorting_parameter = data["sort"]\n\n\tif data["name"]:\n\t\tproduct_name = data["name"]\n\t\tquery = db(db.shopping_basket.name.contains(product_name))\n\t\n\telif data["price"]:\n\t\tproduct_price = data["price"]\n\t\tquery = db(db.shopping_basket.price == product_price)\n\t\n\t\tmin_price = data["min_price"]\n\t\tmin_range = db.shopping_basket.price > min_price \n\n\t\tmax_price = data["max_price"]\n\t\tmax_range = db.shopping_basket.price < max_price \n\t\t\n\t\tif min_price & max_price:\n\t\t\tprice_range = min_range & max_range\n\t\t\tquery = db(price_range)\n\n\t\telif min_price:\t\t\t\n\t\t\tquery = db(min_range)\n\t\t\n\t\telif max_price:\t\t\t\n\t\t\tquery = db(max_range)\n\t\t\n\tif sorting_parameter:\n\t\trows = query.select(\n\t\t\tlimitby = pagination,\n\t\t\torderby = getattr(db.shopping_basket,sorting_parameter))\n\t\n\telif sorting_parameter & price_range:\n\t\trows = query.select(\n\t\t\tlimitby = pagination,\n\t\t\torderby = getattr(db.shopping_basket,sorting_parameter),\n\t\t\tgroupby = db.shopping_basket.name, having = price_range)\n\telse:\n\t\trows = query.select(limitby = pagination, orderby = db.shopping_basket.name)\n\treturn dict(success = True, rows = rows)\nresponse._vars=response._caller(add_product)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "D:\\web2py_win\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "D:\\web2py_win\\web2py\\applications\\webshop\\controllers/webshop_api.py", line 249, in <module>\n  File "D:\\web2py_win\\web2py\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\web2py_win\\web2py\\applications\\webshop\\controllers/webshop_api.py", line 33, in add_product\n    if query.amount > 0:\nAttributeError: \'NoneType\' object has no attribute \'amount\'\n'
p11
s.