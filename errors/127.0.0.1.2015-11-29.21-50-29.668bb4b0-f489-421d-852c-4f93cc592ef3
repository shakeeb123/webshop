(dp1
S'output'
p2
S"<type 'exceptions.UnboundLocalError'> local variable 'product_amount' referenced before assignment"
p3
sS'layer'
p4
S'D:\\web2py_win\\web2py\\applications\\webshop\\controllers/test_api.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*- \nimport json \n \n#Internal method \ndef __valid_product(product_name):\n\t"""\n\tThis call is used to validate the existence of product in catalog with amount because if there is amount, product is not valid for shopping\n\t"""\n\tproduct_name = db.product_catalog.name == product_name\n\tquery = db(product_name).select().first()\n\tif query.amount > 0:\n\t\treturn True\n\treturn False\n \n#Commonly used response \ndef invalid_product():\n\t"""\n\tReturns the values that the product mentioned was invalid and data needs to be provided again.\n\t"""\n\treturn dict(success = False, reason = "Not a valid product.") \n \ndef add_product(): \n\t"""\n\tThis call checks if the product is already added in catalog database, otherwise adds the product and returns its product ID.\n\t"""\n\tdata = json.loads(request.body.read())\n\tproduct_name = data["name"]\n\tproduct_amount = int(data["amount"])\n\tproduct_price = int(data["price"])\n\tproduct = db.product_catalog.name == product_name\n\tquery = db(product).select().first()\n\tif query.amount > 0:\n\t\treturn dict(success = False, reason = "Product already in catalog.")\n\tproduct_id = db.product_catalog.insert(name = product_name, amount = product_amount, price = product_price)\n\treturn dict(success = True, product_id = product_id)\n\n \ndef edit_product():\n\t"""\n\tThis call lets you edit any product after checking its validation and update \n\t"""\n\tdata = json.loads(request.body.read())\n\tproduct_name = data["name"]\n\tprint data\n\tif not __valid_product(product_name):\n\t\tredirect(\'invalid_product.json\')\n\n\tquery = db.product_catalog.name == product_name\n\n\tif data["amount"] and data["price"]:\n\t\tdb(query).update(amount = product_amount, price = product_price)\n\t\treturn dict(success = True)\n\t\n\telif data["amount"]:\n\t\tproduct_amount = int(data["amount"])\n\t\tdb(query).update(amount = product_amount)\n\t\treturn dict(success = True)\n\t\n\telif data["price"]:\n\t\tproduct_price = int(data["price"])\n\t\tdb(query).update(price = product_price)\n\t\treturn dict(success = True)\n\ndef remove_product():\n\t"""\n\tThis call is used to remove any product from catalog deleting all the information related to amount and price of the product.\n\t"""\n\tdata = json.loads(request.body.read())\n\tproduct_name = data["name"]\n\n\tif not __valid_product(product_name):\n\t\tredirect(\'invalid_product.json\')\n\n\tquery = db.product_catalog.name == product_name\n\tdb(query).delete()\n\tdb.commit()\n\treturn dict(success = True)\nresponse._vars=response._caller(edit_product)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "D:\\web2py_win\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "D:\\web2py_win\\web2py\\applications\\webshop\\controllers/test_api.py", line 78, in <module>\n  File "D:\\web2py_win\\web2py\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\web2py_win\\web2py\\applications\\webshop\\controllers/test_api.py", line 51, in edit_product\n    db(query).update(amount = product_amount, price = product_price)\nUnboundLocalError: local variable \'product_amount\' referenced before assignment\n'
p11
s.